{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJs-Training\\\\upload-image-react\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from 'axios';\nimport { storageRef } from './firebase/index';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filesToUpload: [],\n      images: [],\n      uploadedImagesUrl: [],\n      progress: 0,\n      uploaded: false\n    };\n\n    this.fileSelectHandler = event => {\n      event.preventDefault();\n      const imageFiles = event.target.files; //document.getElementById(\"image\"); //It gives all the uploaded images\n\n      const filesLength = imageFiles.length; // imageFiles.files.length;\n\n      for (var i = 0; i < filesLength; i++) {\n        let imgId = Math.random(); //processing the raw image for viewing withing component\n\n        let reader = new FileReader();\n        let file = imageFiles[i];\n\n        reader.onloadend = () => {\n          this.setState(prevState => {\n            return {\n              images: [...prevState.images, {\n                id: imgId,\n                img: reader.result\n              }]\n            };\n          });\n        };\n\n        reader.readAsDataURL(file); //Storing the raw image for upload\n\n        let imgName = imageFiles[i].name;\n        this.setState(prevState => {\n          return {\n            filesToUpload: [...prevState.filesToUpload, {\n              id: imgId,\n              img: file,\n              name: imgName\n            }]\n          };\n        });\n      }\n    };\n\n    this.fileUploadHandler = event => {\n      event.preventDefault();\n      this.state.filesToUpload.forEach((file, index) => {\n        //Storing the image to firebase under \"my_images\" folder\n        const uploadTask = storageRef.child('my_images/' + file.name).put(file.img); //Three call back functions upon each upload operation 1.indicates progress, 2.shows error, 3. if successful gives the uploaded images URL\n\n        uploadTask.on('state_changed', snapshot => {\n          /*indicates Progress*/\n          let uploadProgress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n          this.setState(prevState => {\n            return {\n              progress: prevState.progress + uploadProgress\n            };\n          });\n        }, error => {\n          console.log(error);\n        }, () => {\n          /*Indicates task Completation*/\n          //If successful then get the url of the uploaded image\n          uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n            console.log('File available at', downloadURL);\n            this.setState(prevState => {\n              return {\n                uploadedImagesUrl: [...prevState.uploadedImagesUrl, {\n                  id: file.id,\n                  downloadURL: downloadURL\n                }],\n                progress: 0\n              };\n            });\n          });\n        });\n      });\n      this.setState({\n        uploaded: true\n      }); //Indicates the file is uploaded\n    };\n\n    this.deleteFileHandler = id => {\n      //removing the image from the \"images\" array that we use for viewing the image\n      let tempImages = [...this.state.images];\n      tempImages = tempImages.filter(img => img.id !== id);\n      this.setState({\n        images: tempImages\n      });\n      let tempfilesToUpload = [...this.state.filesToUpload]; //Getting the exact file to delete from the array of raw images from where we uploaded the images\n\n      const file = tempfilesToUpload.find(file => file.id === id); //Deleting the raw image from the array for uploading images(already been uploaded)\n\n      tempfilesToUpload = tempfilesToUpload.filter(file => file.id !== id);\n      this.setState({\n        filesToUpload: tempfilesToUpload\n      }); //Safety check so that we only try to delete from firebase if the image is uploaded\n\n      if (this.state.uploaded) {\n        var desertRef = storageRef.child('my_images/' + file.img.name); //// Create a reference to the file to delete\n        // Delete the file\n\n        desertRef.delete().then(() => {\n          //After deleting removing the URL of the deleted image fro the list of uploaded images URL so it that it cannot be rendered\n          let tempUploadedImagesUrl = [...this.state.uploadedImagesUrl];\n          tempUploadedImagesUrl = tempUploadedImagesUrl.filter(item => item.id !== id);\n          this.setState({\n            uploadedImagesUrl: tempUploadedImagesUrl\n          });\n        }).catch(error => console.log(error));\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container-fluid mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row p-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"offset-md-3 col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      onChange: this.fileSelectHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"offset-md-3 col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.fileUploadHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Upload Image\")), React.createElement(\"div\", {\n      className: \"offset-md-3 col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"progress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"progress-bar\",\n      style: {\n        width: this.state.progress + '%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.state.progress)))), React.createElement(\"div\", {\n      className: \"row mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"mt-2 mb-2 text-center col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Your selected images:\")), React.createElement(\"div\", {\n      className: \"row mt-2 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"offset-md-2 col-md-8 mt-3 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, this.state.images.map((file, index) => {\n      return React.createElement(\"span\", {\n        className: \"mx-1 my-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: file.img,\n        width: \"100px\",\n        height: \"100px\",\n        key: file.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: () => this.deleteFileHandler(file.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Delete\"));\n    }))), React.createElement(\"div\", {\n      className: \"row mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"offset-md-3 col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Your uploaded images:\"), React.createElement(\"div\", {\n      className: \"offset-md-3 col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.state.uploadedImagesUrl.map((img, index) => {\n      return React.createElement(\"img\", {\n        src: img.downloadURL,\n        key: img.id,\n        width: \"100px\",\n        height: \"100px\",\n        style: {\n          margin: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      });\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\ReactJs-Training\\upload-image-react\\src\\App.js"],"names":["React","Component","axios","storageRef","App","state","filesToUpload","images","uploadedImagesUrl","progress","uploaded","fileSelectHandler","event","preventDefault","imageFiles","target","files","filesLength","length","i","imgId","Math","random","reader","FileReader","file","onloadend","setState","prevState","id","img","result","readAsDataURL","imgName","name","fileUploadHandler","forEach","index","uploadTask","child","put","on","snapshot","uploadProgress","round","bytesTransferred","totalBytes","error","console","log","ref","getDownloadURL","then","downloadURL","deleteFileHandler","tempImages","filter","tempfilesToUpload","find","desertRef","delete","tempUploadedImagesUrl","item","catch","render","width","map","margin"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from 'axios';\nimport {storageRef} from './firebase/index';\n\n\nclass  App extends Component{\n\n  state={\n    filesToUpload:[],\n    images:[],\n    uploadedImagesUrl:[],\n    progress:0,\n    uploaded:false\n  };\n\n\n  fileSelectHandler=(event)=>{\n      event.preventDefault();\n\n      const imageFiles = event.target.files; //document.getElementById(\"image\"); //It gives all the uploaded images\n      const filesLength = imageFiles.length; // imageFiles.files.length;\n\n      for(var i = 0; i < filesLength; i++) {\n\n          let imgId=Math.random();\n\n          //processing the raw image for viewing withing component\n          let reader = new FileReader();\n          let file = imageFiles[i];\n          reader.onloadend = () => {\n              this.setState((prevState)=> {\n                  return { images:[...prevState.images, {id:imgId, img:reader.result}] }\n              });\n          };\n          reader.readAsDataURL(file);\n\n\n          //Storing the raw image for upload\n          let imgName=imageFiles[i].name;\n          this.setState((prevState)=>{\n              return {\n                  filesToUpload:[...prevState.filesToUpload, {id:imgId, img:file, name:imgName}]\n              }\n          });\n      }\n  };\n\n  fileUploadHandler=(event)=>{\n      event.preventDefault();\n\n    this.state.filesToUpload.forEach((file, index)=>{\n\n        //Storing the image to firebase under \"my_images\" folder\n        const uploadTask=storageRef.child('my_images/'+file.name).put(file.img);\n        //Three call back functions upon each upload operation 1.indicates progress, 2.shows error, 3. if successful gives the uploaded images URL\n        uploadTask.on('state_changed', (snapshot)=>{\n\n            /*indicates Progress*/\n            let uploadProgress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\n            this.setState((prevState)=>{\n                return {progress:prevState.progress+uploadProgress}\n            })\n\n        }, (error)=>{\n            console.log(error)\n        }, ()=>{\n\n            /*Indicates task Completation*/\n            //If successful then get the url of the uploaded image\n            uploadTask.snapshot.ref.getDownloadURL().then((downloadURL)=>{\n                console.log('File available at', downloadURL);\n                this.setState((prevState)=>{\n                    return { uploadedImagesUrl:[...prevState.uploadedImagesUrl, {id:file.id ,downloadURL:downloadURL}], progress:0 }\n                });\n            });\n\n        });\n\n    });\n    this.setState({uploaded:true});//Indicates the file is uploaded\n  };\n\n  deleteFileHandler=(id)=>{\n      //removing the image from the \"images\" array that we use for viewing the image\n      let tempImages=[...this.state.images];\n      tempImages=tempImages.filter(img=>img.id!==id);\n      this.setState({images:tempImages});\n\n\n      let tempfilesToUpload=[...this.state.filesToUpload];\n\n\n      //Getting the exact file to delete from the array of raw images from where we uploaded the images\n      const file=tempfilesToUpload.find(file=>file.id===id);\n\n      //Deleting the raw image from the array for uploading images(already been uploaded)\n      tempfilesToUpload=tempfilesToUpload.filter(file=>file.id!==id);\n      this.setState({filesToUpload:tempfilesToUpload});\n\n      //Safety check so that we only try to delete from firebase if the image is uploaded\n      if(this.state.uploaded){\n          var desertRef = storageRef.child('my_images/'+file.img.name);//// Create a reference to the file to delete\n          // Delete the file\n          desertRef.delete().then(()=>{\n\n              //After deleting removing the URL of the deleted image fro the list of uploaded images URL so it that it cannot be rendered\n              let tempUploadedImagesUrl=[...this.state.uploadedImagesUrl];\n              tempUploadedImagesUrl=tempUploadedImagesUrl.filter(item=>item.id!==id);\n              this.setState({uploadedImagesUrl:tempUploadedImagesUrl});\n\n          }).catch((error)=>console.log(error));\n      }\n  };\n\n render(){\n\n   return (\n       <div className=\"App\">\n         <div className=\"container-fluid mt-5\">\n\n             <div className=\"row p-5\">\n                <div className=\"offset-md-3 col-md-6\">\n                    <form>\n                        <div className=\"input-group text-center\">\n                            <input type=\"file\" className=\"form-control\"  onChange={this.fileSelectHandler}/>\n                        </div>\n                    </form>\n                </div>\n                 <div className=\"offset-md-3 col-md-6 mt-3\">\n                     <button className=\"btn btn-primary\" onClick={this.fileUploadHandler}>Upload Image</button>\n                 </div>\n                 <div className=\"offset-md-3 col-md-6 mt-3\">\n                     <div className=\"progress\">\n                         <div className=\"progress-bar\"  style={{width:this.state.progress+'%'}}>{this.state.progress}</div>\n                     </div>\n                 </div>\n             </div>\n\n             <div className=\"row mt-5\">\n                 <h5 className=\"mt-2 mb-2 text-center col-sm-12\">Your selected images:</h5>\n             </div>\n             <div className=\"row mt-2 mb-2\">\n                 <div className=\"offset-md-2 col-md-8 mt-3 text-center\">\n                     {/*<img src={this.state.images[0]} width=\"100px\" height=\"100px\" />*/}\n                     {this.state.images.map((file, index)=>{\n                         return (\n                             <span  className=\"mx-1 my-5\">\n                                 <img src={file.img} width=\"100px\" height=\"100px\"  key={file.id}/>\n                                 <button className=\"btn btn-danger\" onClick={()=>this.deleteFileHandler(file.id)}>Delete</button>\n                             </span>\n                         )\n                     })}\n                 </div>\n             </div>\n\n             <div className=\"row mt-2\">\n                 <h5 className=\"offset-md-3 col-md-6 mt-3\">Your uploaded images:</h5>\n                 <div className=\"offset-md-3 col-md-6 mt-3\">\n                     { this.state.uploadedImagesUrl.map((img,index)=>{\n                         return <img src={img.downloadURL} key={img.id} width=\"100px\" height=\"100px\" style={{margin: '20px'}}/>\n                     })\n                     }\n                 </div>\n             </div>\n\n         </div>\n       </div>\n   );\n }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}