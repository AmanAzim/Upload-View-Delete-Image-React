{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJs-Training\\\\upload-image-react\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from 'axios';\nimport { storageRef } from './firebase/index';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filesToUpload: [],\n      images: [],\n      uploadedImagesUrl: [],\n      progress: 0\n    };\n\n    this.upload_preview_handler = event => {\n      this.fileSelectHandler_uploader(event);\n      this.fileSelectHandler_viewer(event);\n    };\n\n    this.fileSelectHandler_uploader = event => {\n      /*\n        //this.setState({selectedFile:event.target.files[0]});\n       const selectedFile=event.target.files[0];\n       this.setState((prevState)=>{\n           return {\n               filesToUpload:[...prevState.filesToUpload, {id:Math.random(), img:selectedFile}]\n           }\n       }, ()=>{//console.log('selectedFile',this.state.filesToUpload);\n       });\n       */\n    };\n\n    this.fileSelectHandler_viewer = event => {\n      event.preventDefault();\n      console.log(event.target.files[0]);\n      const imageFiles = event.target.files; //document.getElementById(\"image\"); //It gives all the uploaded images\n\n      const filesLength = imageFiles.length; // imageFiles.files.length;\n\n      for (var i = 0; i < filesLength; i++) {\n        let imgId = Math.random(); //processing the raw image for viewing\n\n        let reader = new FileReader(); //let file = ;\n\n        reader.onloadend = () => {\n          this.setState(prevState => {\n            return {\n              images: [...prevState.images, {\n                id: imgId,\n                img: reader.result\n              }]\n            };\n          });\n        };\n\n        reader.readAsDataURL(imageFiles[i]); //Storing the raw image for upload\n\n        this.setState(prevState => {\n          return {\n            filesToUpload: [...prevState.filesToUpload, {\n              id: imgId,\n              img: imageFiles[i]\n            }]\n          };\n        }, () => {//console.log('selectedFile',this.state.filesToUpload);\n        });\n      } //this.setState({selectedFile:event.target.files[0]});\n\n    };\n\n    this.fileUploadHandler = event => {\n      event.preventDefault(); //this.setState({uploadedImagesUrl:[]});\n\n      this.state.filesToUpload.forEach((file, index) => {\n        console.log('uploading', file.img.name);\n        const uploadTask = storageRef.child('my_images/' + file.img.name).put(file.img);\n        uploadTask.on('state_changed', snapshot => {\n          /*indicates Progress*/\n          let uploadProgress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n          this.setState(prevState => {\n            return {\n              progress: prevState.progress + uploadProgress\n            };\n          });\n        }, error => {\n          console.log(error);\n        }, () => {\n          /*Indicates task Completation*/\n          //If successful then get the url of the uploaded image\n          uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n            console.log('File available at', downloadURL);\n            this.setState(prevState => {\n              return {\n                uploadedImagesUrl: [...prevState.uploadedImagesUrl, {\n                  id: file.id,\n                  downloadURL: downloadURL\n                }],\n                progress: 0\n              };\n            });\n          });\n        });\n      });\n    };\n\n    this.deleteFileHandler = id => {\n      let tempImages = [...this.state.images]; //tempImages.splice(index, 1);\n\n      tempImages = tempImages.filter(img => img.id !== id);\n      this.setState({\n        images: tempImages\n      });\n      let tempfilesToUpload = [...this.state.filesToUpload]; //const imageName=tempfilesToUpload[index].name;\n\n      const file = tempfilesToUpload.find(file => file.id === id); //tempfilesToUpload.splice(index, 1);\n\n      tempfilesToUpload = tempfilesToUpload.filter(file => file.id !== id);\n      this.setState({\n        filesToUpload: tempfilesToUpload\n      });\n      var desertRef = storageRef.child('my_images/' + file.img.name); //// Create a reference to the file to delete\n      // Delete the file\n\n      desertRef.delete().then(() => {\n        let tempUploadedImagesUrl = [...this.state.uploadedImagesUrl];\n        tempUploadedImagesUrl = tempUploadedImagesUrl.filter(item => item.id !== id);\n        this.setState({\n          uploadedImagesUrl: tempUploadedImagesUrl\n        }); //alert(imageName+' is deleted');\n      }).catch(error => console.log(error));\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container-fluid mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row p-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"offset-md-3 col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      onChange: this.upload_preview_handler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"offset-md-3 col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.fileUploadHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Upload Image\")), React.createElement(\"div\", {\n      className: \"offset-md-3 col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"progress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"progress-bar\",\n      style: {\n        width: this.state.progress + '%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"row mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"mt-2 mb-2 text-center col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Your selected images:\")), React.createElement(\"div\", {\n      className: \"row mt-2 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"offset-md-2 col-md-8 mt-3 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.state.images.map((file, index) => {\n      return React.createElement(\"span\", {\n        className: \"mx-1 my-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: file.img,\n        width: \"100px\",\n        height: \"100px\",\n        key: file.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), file.id, React.createElement(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: () => this.deleteFileHandler(file.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Delete\"));\n    }))), React.createElement(\"div\", {\n      className: \"row mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"offset-md-3 col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Your uploaded images:\"), React.createElement(\"div\", {\n      className: \"offset-md-3 col-md-6 mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, this.state.uploadedImagesUrl.map((img, index) => {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: img.downloadURL,\n        key: img.id,\n        width: \"100px\",\n        height: \"100px\",\n        style: {\n          margin: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), img.id);\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\ReactJs-Training\\upload-image-react\\src\\App.js"],"names":["React","Component","axios","storageRef","App","state","filesToUpload","images","uploadedImagesUrl","progress","upload_preview_handler","event","fileSelectHandler_uploader","fileSelectHandler_viewer","preventDefault","console","log","target","files","imageFiles","filesLength","length","i","imgId","Math","random","reader","FileReader","onloadend","setState","prevState","id","img","result","readAsDataURL","fileUploadHandler","forEach","file","index","name","uploadTask","child","put","on","snapshot","uploadProgress","round","bytesTransferred","totalBytes","error","ref","getDownloadURL","then","downloadURL","deleteFileHandler","tempImages","filter","tempfilesToUpload","find","desertRef","delete","tempUploadedImagesUrl","item","catch","render","width","map","margin"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from 'axios';\nimport {storageRef} from './firebase/index';\n\n\nclass  App extends Component{\n\n  state={\n    filesToUpload:[],\n    images:[],\n    uploadedImagesUrl:[],\n    progress:0,\n  };\n\n  upload_preview_handler=(event)=>{\n      this.fileSelectHandler_uploader(event);\n      this.fileSelectHandler_viewer(event);\n  };\n\n  fileSelectHandler_uploader=(event)=>{\n     /*\n       //this.setState({selectedFile:event.target.files[0]});\n      const selectedFile=event.target.files[0];\n      this.setState((prevState)=>{\n          return {\n              filesToUpload:[...prevState.filesToUpload, {id:Math.random(), img:selectedFile}]\n          }\n      }, ()=>{//console.log('selectedFile',this.state.filesToUpload);\n      });\n      */\n  };\n\n  fileSelectHandler_viewer=(event)=>{\n      event.preventDefault();\n      console.log(event.target.files[0]);\n      const imageFiles = event.target.files; //document.getElementById(\"image\"); //It gives all the uploaded images\n      const filesLength = imageFiles.length; // imageFiles.files.length;\n\n      for(var i = 0; i < filesLength; i++) {\n\n          let imgId=Math.random();\n\n          //processing the raw image for viewing\n          let reader = new FileReader();\n          //let file = ;\n          reader.onloadend = () => {\n              this.setState((prevState)=> {\n                  return { images:[...prevState.images, {id:imgId, img:reader.result}] }\n              });\n          };\n          reader.readAsDataURL(imageFiles[i]);\n\n          //Storing the raw image for upload\n          this.setState((prevState)=>{\n              return {\n                  filesToUpload:[...prevState.filesToUpload, {id:imgId, img:imageFiles[i]}]\n              }\n          }, ()=>{//console.log('selectedFile',this.state.filesToUpload);\n          });\n      }\n    //this.setState({selectedFile:event.target.files[0]});\n  };\n\n  fileUploadHandler=(event)=>{\n      event.preventDefault();\n    //this.setState({uploadedImagesUrl:[]});\n\n    this.state.filesToUpload.forEach((file, index)=>{\n      console.log('uploading',file.img.name)\n        const uploadTask=storageRef.child('my_images/'+file.img.name).put(file.img);\n\n        uploadTask.on('state_changed', (snapshot)=>{\n            /*indicates Progress*/\n            let uploadProgress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\n            this.setState((prevState)=>{\n                return {progress:prevState.progress+uploadProgress}\n            })\n\n        }, (error)=>{\n            console.log(error)\n        }, ()=>{\n            /*Indicates task Completation*/\n            //If successful then get the url of the uploaded image\n            uploadTask.snapshot.ref.getDownloadURL().then((downloadURL)=>{\n                console.log('File available at', downloadURL);\n                this.setState((prevState)=>{\n                    return { uploadedImagesUrl:[...prevState.uploadedImagesUrl, {id:file.id ,downloadURL:downloadURL}], progress:0 }\n                });\n            });\n        });\n    });\n\n  };\n\n  deleteFileHandler=(id)=>{\n      let tempImages=[...this.state.images];\n      //tempImages.splice(index, 1);\n      tempImages=tempImages.filter(img=>img.id!==id);\n      this.setState({images:tempImages});\n\n\n      let tempfilesToUpload=[...this.state.filesToUpload];\n\n      //const imageName=tempfilesToUpload[index].name;\n      const file=tempfilesToUpload.find(file=>file.id===id);\n\n      //tempfilesToUpload.splice(index, 1);\n      tempfilesToUpload=tempfilesToUpload.filter(file=>file.id!==id);\n      this.setState({filesToUpload:tempfilesToUpload});\n\n\n\n      var desertRef = storageRef.child('my_images/'+file.img.name);//// Create a reference to the file to delete\n\n      // Delete the file\n      desertRef.delete().then(()=>{\n\n          let tempUploadedImagesUrl=[...this.state.uploadedImagesUrl];\n          tempUploadedImagesUrl=tempUploadedImagesUrl.filter(item=>item.id!==id);\n          this.setState({uploadedImagesUrl:tempUploadedImagesUrl});\n          //alert(imageName+' is deleted');\n\n      }).catch((error)=>console.log(error));\n  };\n\n render(){\n\n   return (\n       <div className=\"App\">\n         <div className=\"container-fluid mt-5\">\n\n             <div className=\"row p-5\">\n                <div className=\"offset-md-3 col-md-6\">\n                    <form>\n                        <div className=\"input-group text-center\">\n                            <input type=\"file\" className=\"form-control\"  onChange={this.upload_preview_handler}/>\n                        </div>\n                    </form>\n                </div>\n                 <div className=\"offset-md-3 col-md-6 mt-3\">\n                     <button className=\"btn btn-primary\" onClick={this.fileUploadHandler}>Upload Image</button>\n                 </div>\n                 <div className=\"offset-md-3 col-md-6 mt-3\">\n                     <div className=\"progress\">\n                         <div className=\"progress-bar\"  style={{width:this.state.progress+'%'}}></div>\n                     </div>\n                 </div>\n             </div>\n\n             <div className=\"row mt-5\">\n                 <h5 className=\"mt-2 mb-2 text-center col-sm-12\">Your selected images:</h5>\n             </div>\n             <div className=\"row mt-2 mb-2\">\n                 <div className=\"offset-md-2 col-md-8 mt-3 text-center\">\n                     {/*<img src={this.state.images[0]} width=\"100px\" height=\"100px\" />*/}\n                     {this.state.images.map((file, index)=>{\n                         return (\n                             <span  className=\"mx-1 my-5\">\n                                 <img src={file.img} width=\"100px\" height=\"100px\"  key={file.id}/>{file.id}\n                                 <button className=\"btn btn-danger\" onClick={()=>this.deleteFileHandler(file.id)}>Delete</button>\n                             </span>\n                         )\n                     })}\n                 </div>\n             </div>\n\n             <div className=\"row mt-2\">\n                 <h5 className=\"offset-md-3 col-md-6 mt-3\">Your uploaded images:</h5>\n                 <div className=\"offset-md-3 col-md-6 mt-3\">\n                     { this.state.uploadedImagesUrl.map((img,index)=>{\n                         return <React.Fragment><img src={img.downloadURL} key={img.id} width=\"100px\" height=\"100px\" style={{margin: '20px'}}/>{img.id}</React.Fragment>\n                     })\n                     }\n                 </div>\n             </div>\n\n         </div>\n       </div>\n   );\n }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}